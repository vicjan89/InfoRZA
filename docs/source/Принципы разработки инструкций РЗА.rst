Принципы разработки инструкций по РЗА 2.0
=========================================

#. Количество инструкций должно определяться количеством рабочих мест оперативного персонала;
#. Первый раздел инструкции "Краткая характеристика оборудования" должен содержать информацию о применяемой базе (электромеханические или микропроцессорные устройства), возможных местах размещения (шкафы, панели, на ОРУ в ОПУ ...);
#. Следующие разделы инструкции должны формироваться по присоединениям или утройствам РЗА аналогично их наименованию в многолетнем графике с соблюдением диспетчерских наименований. В разделах должна быть информация о том кто должен знать (категория персонала) и подразделы; Названия присоединенй подчёркиваем =======.
#. Подразделы должны включать следующую информацию (если пункт не имеет смысла то его опускаем):
    #. Наименовании функции защиты, автоматики, управления, измерения или сигнализации. Подчёркиваем ---------- ;
        #. Место установки:
        #. Источник опертока:
        #. Измеряет: (к каким измерительным преобразователям подключена - ТТ, ТН, датчик температуры...);
        #. Работает: (На какие повреждения реагирует и в какой зоне для дифзащит);
        #. Действует: (на какие коммутационные аппараты) с выдержкой времени или без;
        #. Переключающее устройство: Название устройства взять в двойные кавычки;
        #. Сигнализация: Название сигнального элемента взять в двойные кавычки.
    #. Список сигнализации. Перечень сигнальных элементов с указанием типа (блинкер, светодиод или лампа), схеммного наименования, дипетчерского наименования в двойных кавычках, места установки, перечня причин срабатывания. Подчёркиваем ............ ;
    #. Список телесигналов: с указанием наименования, откуда взят (на понятном для оперативного персонала языке). Названия телесигналов взять в двойные кавычки;
    #. Список переключающих устройств: Перечень переключающих устройств с указанием типа (ключ, накладка, блок испытательный), схеммного наименования, дипетчерского наименования в двойных кавычках, места установки, возможные положения, наименования возможных положений, нормальное положение (можно выделить жирным одно из возможных положений);
    #. Список коммутационной аппаратуры: Перечень коммутационных аппаратов с указанием типа (автомат, предохранитель, рубильник), схеммного наименования, дипетчерского наименования в двойных кавычках, места установки, нормального положения, назначения;
#. Для функций АВР опертока и АВР-6-10кВ распредсети привести порядок опробования оперативным персоналом;
#. В тексте должны описываться все логические цепочки функций согласно исполнительных схем;
#. Необходимо исключить повторение информации;
#. В текстовой части не упоминать конкретные схемные наименования указательных реле, автоматов, переключателей. Данную информацию указывать в таблицах;
#. Приложение 1 Описание интерфейса применяемых микропроцессорных терминалов. Включить карту меню. Описывать отдельно по моделям терминалов и версиям их ПО;
#. Приложение 2 Описание принципов действия нетиповых защит. Описать те защиты о которых нельзя прочитать в книгах о РЗА (ЛЗШ, ЛЗТ, ЛЗКЛ, блокировка от сквозных КЗ...). В тексте подразделов просто приводим ссылки на эти описания;
#. Глава "Критерии и пределы безопасного состояния и режимов оборудования РЗА" должна содержать критерии и пределы по температуре, влажности и уровню напряжения опертока;
#. Глава "Порядок ввода и вывода устройств РЗА" должна содержать общие подходы по вводу в работу и вывода в ремонт или резерв устройств РЗА и, если есть, специфические для некоторых устройств;
#. Глава "Порядое допуска к осмотру, ремонту и испытаниям" должна содержать общие требования со ссылкой на действующие правила безопасности при работе в электроустановках;
#. Глава "Требования по безопасности при эксплуатации аппаратуры РЗАИ" должны содержать специфические требования не приведенные в СТП 09110.35.520-07 Инструкция по обслуживанию оперативным персоналом устройств релейной защиты, электроавтоматики и вторичной коммутации.

Приложение 1 Пример подраздела

ВВ-10кВ отходящей линии
------------------------------------

+------------------------------------+-------------------------------------------------------+-------------------+--------------+-----------------------------+
| Наименовании функции               |  Когда работает                                       |  Источник опертока|  Что измеряет| Куда действует              |
+====================================+=======================================================+===================+==============+=============================+
|   МТЗ                              | Междуфазные КЗ                                        |  ТТ-10кВ          | Ток ТТ-10кВ  | Отключение ВВ-10кВ          |
+------------------------------------+-------------------------------------------------------+-------------------+--------------+-----------------------------+
| Управление ВВ                      |  Подача команд ключом управления или по телеуправлению|   ШУ              |              | Включение/отключение ВВ-10кВ|
+------------------------------------+-------------------------------------------------------+-------------------+--------------+-----------------------------+
| Сигнализация  аварийного отключения| Выключатель отключен при последней команде "Включить" |   ШС              |              |  Аварийный сигнал ЦС        |
+------------------------------------+-------------------------------------------------------+-------------------+--------------+-----------------------------+

Стандартный синтаксис разметки reStructuredText
===============================================

В главе приведен стандартный синтаксис разметки reStructuredText. Python Sphinx значительно расширяет возможности reStructuredText и вносит дополнительные конструкции. Так как данная глава может быть полезна всем пользователям reStructuredText, конструкции работающие только в Sphinx вынесены в следующую главу.


Что такое reStructuredText?
------------------------------------

**reStructuredText** (сокращение: **ReST**, расширение файла: **.rst**) — облегчённый язык разметки, который может быть преобразован в различные форматы — HTML, ePub, PDF и другие.

Документы с разметкой ReST являются обычными текстовыми файлами. С такими файлами очень легко работать посредством системы управления Git, которая позволяет отслеживать все вносимые изменения, легко принимать или отклонять их.

Помимо этого, документы в формате .rst можно открывать и редактировать в любом простом текстовом редакторе (например, в Блокноте). Это позволяет работать над документацией в любых условиях, на любых платформах, без необходимости использовать специализированное программное обеспечение.

Самое главное, что ReST позволяет сосредоточиться исключительно на структуре документа и не отвлекаться на его оформление.

ReST аналогичен языку разметки Markdown, но обладает более расширенным синтаксисом, особенно вкупе с генератором документации Sphinx.  ReST используется во многих проектах, например, на сайте GitHub. Также его используют многие генераторы статических сайтов такие, как: Hyde, Pelican и другие.


Редакторы reStructuredText
------------------------------------

Документы с разметкой ReST можно создавать в любом обычном текстовом редакторе, но существует ряд специализированных редакторов ReST с возможностью предпросмотра и другими удобными функциями.

ReText
~~~~~~

**ReText** (https://github.com/retext-project/retext) — редактор Markdown и reStructuredText для Linux. Есть возможность установки ReText в ОС Windows, инструкция находится `здесь <http://sourceforge.net/p/retext/wiki/Windows%20Install%20of%20ReText/>`_. Для Mac OS X репозиторий `Homebrew <http://brew.sh/>`_: https://github.com/samueljohn/homebrew-python

Основные возможности редактора:

* Полная поддержка Markdown и reStructuredText, а также расширений Python-Markdown;
* Экспорт в HTML, PDF, ODT из коробки, а также возможность создавать свои собственные экспортные расширения (например, есть расширение для загрузки в Google Drive);
* Поддержка вкладок;
* Поддержка CSS-стилей и подсветка синтаксиса;
* Проверка орфографии (в том числе и для русского языка);
* Два движка просмотра: основанный на QTextBrowser и основанный на WebKit.
* Поддержка математических формул (с синтаксисом LaTeX).
  
.. warning:: ReText не распознает конструкции, специфичные для Sphinx.

.. note:: Данное руководство написано с помощью ReText. 

Синтаксис reStructuredText
------------------------------------

Базовые концепции
~~~~~~~~~~~~~~~~~

Синтаксис reStructuredText опирается на следующие концепции:

* Отступы и пробелы имеют значение для команд разметки [#]_, но не имеют значения внутри текста (10 пробелов будут отображены как один);
* В командах (директивах) используется символ обратной кавычки «`», который располагается на клавише с буквой ``ё`` и символом ``~``. Использование обычных одинарных кавычек в командах не приведет к желаемым результатам.

.. [#] Не важно как делается отступ — пробелами или клавишей Tab, главное, чтобы они были одинакового размера.

Абзацы
~~~~~~

Абзацы отделяются друг от друга пустой строкой:
::
    
    Первый абзац...
    
    Строки параграфов начинаются от левой границы
    и отделяются параграфы друг от друга пустой строкой. 
    

Заголовки
~~~~~~~~~

`ReST (reStructuredText)` поддерживает несколько уровней заголовков. Заголовки первого уровня (главы) подчеркиваются символом равно ``=``. Заголовки второго уровня (подглавы) подчеркиваются символом короткого тире или минуса ``-``. Заголовки третьего уровня (подпункта) подчеркиваются символом тильды  ``~``. Для параграфов допускается использовать подчеркивание символами двойных кавычек ``"``  

Заголовки подчеркиваются (или отбиваются сверху и снизу) с помощью небуквенных 
и нецифровых 7­-битных ASCII символов. Рекомендуется использовать: «``= ­ ` : ' " ~ ^ _ * + # < >``». Отбивка должна быть не короче текста заголовка.

::

    Заголовок 1 уровня
    ==================
    
    Заголовок 2 уровня
    ---------------------------
    
    Заголовок 3 уровня
    ~~~~~~~~~~~~~~~~~~
    
    Заголовок 4 уровня
    """""""""""""""""""""
    
Начертание
~~~~~~~~~~

Чтобы выделить текст **жирным** начертанием или *курсивным* используется обособление звездочками:
::

    **жирный текст**
    
    *курсив текст*

.. attention:: Не допускается наличие пробелов между выделяемым словом и звездочкой, например, команда ``** жирный текст**`` не даст нужного эффекта.

Начертание текста ``«как есть»`` достигается обособлением двумя обратными кавычками:
::

    ``«как есть»``
    

Нумерованные списки
~~~~~~~~~~~~~~~~~~~

Нумерованные списки создаются с помощью символа решетки с точкой ``#.``:
::

    #. Один
    #. Два
    #. Три
    
    Или:
    5. Пять
    6. Шесть
    #. Семь

Результат:

#. Один
#. Два
#. Три

Или:

5. Пять
6. Шесть
#. Семь


Маркированные списки
~~~~~~~~~~~~~~~~~~~~
Маркированные списки создаются с помощью символа звездочки ``*`` или дефиса ``-``. Пробелы после маркера обязательны:
::

    * Один
    * Два
    * Три

Результат:

* Один
* Два
* Три


Вложенные списки
~~~~~~~~~~~~~~~~
::

    * Первый уровень 
        * Второй уровень
            * Третий уровень   

Результат:

* Первый уровень
    * Второй уровень
        * Третий уровень   

::

    #. Один
        * Маркер
    #. Два
        #. Номер

Результат:

#. Один
    * Маркер
#. Два
    #. Номер
    

Верхний и нижние индексы
~~~~~~~~~~~~~~~~~~~~~~~~

Верхние и нижние индексы добавляются с помощью команд  ``:sub:`` и ``:sup:``.
::

    H\ :sub:`2`\ O
    E = mc\ :sup:`2`
    
Результат:

* H\ :sub:`2`\ O
* E = mc\ :sup:`2`

Другой способ с помощью автозамены:
::

    Химическая формула воды — |H2O|.
    
    .. |H2O| replace:: H\ :sub:`2`\ O

Химическая формула воды — |H2O|.

.. |H2O| replace:: H\ :sub:`2`\ O


Определения
~~~~~~~~~~~
В ReST (reStructuredText)` можно набрать два типа определений:
::
    
    :Первый: В прямоугольном треугольнике квадрат длины
             гипотенузы равен сумме квадратов длин катетов.

    Второй
        В прямоугольном треугольнике квадрат длины
        гипотенузы равен сумме квадратов длин катетов.

Результат:
    
:Первый: В прямоугольном треугольнике квадрат длины гипотенузы равен сумме квадратов длин катетов.

Второй
    В прямоугольном треугольнике квадрат длины гипотенузы равен сумме квадратов длин катетов.


Цитаты
~~~~~~

Для вставки цитат используется отступ, сделанный с помощью клавиши `Tab`:
::
        
    Основной текст:
      
        Цитата неизвестного человека 
        
        --Аноним


Результат:

    Цитата неизвестного человека 
        
    --Аноним

Формулы
~~~~~~~

Вставка формул осуществляется командой ``.. math::``. Для ввода формул используется синтаксис LaTeX:

::

    .. math::
       
       \alpha_t(i) = P(O_1, O_2, … O_t, q_t = S_i \lambda)

Результат:      

.. math::
      
    \alpha_t(i) = P(O_1, O_2, … O_t, q_t = S_i \lambda)
   

.. note:: `Таблица математических символов <https://ru.wikipedia.org/wiki/Таблица_математических_символов>`_


.. _admonitions-label:


Комментарии
~~~~~~~~~~~
В `ReST (reStructuredText)` можно оставлять комментарии, которые отображаются только в исходном файле ReST. Комментарии создаются с помощью двух точек в начале предложения ``..``. Для создания многострочных комментариев необходимо соблюдать отступ:
::
    
    .. Это комментарий
       Многострочный комментарий 
    
.. Это комментарий
   Много строчный комментарий 

.. _listing-rst:



Автозамены (Подстановки)
~~~~~~~~~~~~~~~~~~~~~~~~

Язык |ReST| — очень гибкий язык разметки, который поддерживает функцию автозамены (подстановки).

.. |ReST| replace:: *reStructuredText*

::

    Язык |ReST| — очень гибкий язык разметки (подстановки).
    
    .. |ReST| replace:: *reStructuredText*

Для удобства я в начале каждого файла делаю список автозамен. 


Использование символов юникод (unicode)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

С функцией автозамены связана функция вставки символов unicode:
::

    Copyright |copy| 2015, |LibreRussia (TM)| |---| все права защищены.

    .. |copy| unicode:: 0xA9 .. знак копирайта
    .. |LibreRussia (TM)| unicode:: LibreRussia U+2122 .. символ торговой марки
    .. |---| unicode:: U+02014 .. длинное тире
       
Получится такой результат:

Copyright |copy| 2015, |LibreRussia (TM)| |---| все права защищены.

.. |copy| unicode:: 0xA9 .. знак копирайта
.. |LibreRussia (TM)| unicode:: LibreRussia U+2122 .. символ торговой марки
.. |---| unicode:: U+02014 .. длинное тире
   

Дата и время
~~~~~~~~~~~~

::
    
    .. |date| date:: %d.%m.%Y
    .. |time| date:: %H:%M

    Текущая дата |date| и время |time|


.. |date| date:: %d.%m.%Y
.. |time| date:: %H:%M


Результат: Текущая дата |date| и время |time| (на момент генерации документа).


Sphinx добавляет дополнительные команды автозамены, которые не требуют объявления. Подробнее о них написано в следующей главе.


Вставка текста из других файлов
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ReST позволяет вставлять текст из других файлов:
::
    
        .. include:: имя_файла


Черта (Линия)
~~~~~~~~~~~~~

Иногда возникает необходимость  визуально отделить абзац, для этого можно воспользоваться чертой, достаточно поставить подряд несколько дефисов (не меньше 4-х), также можно воспользоваться нижним подчеркиванием:
::
    
    --------
    
    ________


.. warning:: Символы черты должны быть отбиты пустыми строками до и после.

.. warning:: Черта не должна завершать документ. Черта, расположенная в самом конце документа может вызывать ошибки при сборке.


Изображения и иллюстрации
~~~~~~~~~~~~~~~~~~~~~~~~~

Вставка изображения между слов |кубик-рубика| осуществляться с помощью функции автозамены:
::
    
    Вставка изображения между слов |кубик-рубика| осуществляться с помощью функции автозамены:
    
    .. |кубик-рубика| image:: _static/favicon.ico


.. |кубик-рубика| image:: _static/favicon.ico

Вставка изображений между абзацами осуществляется так:

::

    .. figure:: _static/favicon.png
           :scale: 300 %
           :align: center
           :alt: Альтернативный текст
        
           Подпись изображения
        
           Легенда изображения. 

.. _my-favicon:

.. figure:: _static/favicon.png
           :scale: 300 %
           :align: center
           :alt: Альтернативный текст
        
           Подпись изображения
        
           Легенда изображения. 

Параметр ``:scale:`` устанавливает масштаб изображений.

Параметр ``:align:`` устанавливает обтекание текстом, может принимать опции ``left``, ``center`` или ``right``.

Ещё один способ:
::

    .. image:: picture.jpeg
       :height: 100px
       :width: 200 px
       :scale: 50 %
       :alt: alternate text
       :align: right



.. _table-label:

Таблицы
~~~~~~~

Создавать таблицы можно несколькими способами:
::

    .. table:: Заголовок таблицы (Внимание! Отступ таблицы относительно
               команды ..``table::`` обязателен)
    
        +------------------------+------------+----------+----------+
        | Header row, column 1   | Header 2   | Header 3 | Header 4 |
        | (header rows optional) |            |          |          |
        +========================+============+==========+==========+
        | body row 1, column 1   | column 2   | column 3 | column 4 |
        +------------------------+------------+----------+----------+
        | body row 2             | Cells may span columns.          |
        +------------------------+------------+---------------------+
        | body row 3             | Cells may  | - Table cells       |
        +------------------------+ span rows. | - contain           |
        | body row 4             |            | - body elements.    |
        +------------------------+------------+---------------------+

.. important:: Отступ таблицы относительно команды ``.. table::`` обязателен

Результат:

.. table:: Заголовок таблицы (Внимание! Отступ таблицы относительно команды  ``.. table::`` обязателен)

    +------------------------+------------+----------+----------+
    | Header row, column 1   | Header 2   | Header 3 | Header 4 |
    | (header rows optional) |            |          |          |
    +========================+============+==========+==========+
    | body row 1, column 1   | column 2   | column 3 | column 4 |
    +------------------------+------------+----------+----------+
    | body row 2             | Cells may span columns.          |
    +------------------------+------------+---------------------+
    | body row 3             | Cells may  | - Table cells       |
    +------------------------+ span rows. | - contain           |
    | body row 4             |            | - body elements.    |
    +------------------------+------------+---------------------+

Простая таблица:
::
    
    .. table:: Простая таблица
        =====  =====  =======
          A      B    A and B
        =====  =====  =======
        False  False  False
        True   False  False
        False  True   False
        True   True   True
        =====  =====  =======


Результат:

.. table:: Простая таблица

    =====  =====  =======
      A      B    A and B
    =====  =====  =======
    False  False  False
    True   False  False
    False  True   False
    True   True   True
    =====  =====  =======


Ещё один пример:
::
    
    .. table:: Простая таблица со сложной шапкой    
    
        =====  =====  ======
           Inputs     Output
        ------------  ------
          A      B    A or B
        =====  =====  ======
        False  False  False
        True   False  True
        False  True   True
        True   True   True
        =====  =====  ======
    
Результат:   
 
.. table:: Простая таблица со сложной шапкой   
       
    =====  =====  ======
       Inputs     Output
    ------------  ------
      A      B    A or B
    =====  =====  ======
    False  False  False
    True   False  True
    False  True   True
    True   True   True
    =====  =====  ======

Ещё один тип таблицы — CSV-таблица:

::

    .. csv-table:: CSV-таблица
       :header: "Treat", "Quantity", "Description"
       :widths: 15, 10, 30
    
       "Albatross", 2.99, "On a stick!"
       "Crunchy Frog", 1.49, "If we took the bones out, it wouldn't be
       crunchy, now would it?"
       "Gannet Ripple", 1.99, "On a stick!"

Результат: 

.. _cvs-table:

.. csv-table:: CSV-таблица
   :header: "Treat", "Quantity", "Description"
   :widths: 15, 10, 30

   "Albatross", 2.99, "On a stick!"
   "Crunchy Frog", 1.49, "If we took the bones out, it wouldn't be
   crunchy, now would it?"
   "Gannet Ripple", 1.99, "On a stick!"


.. note:: Смотрите также статью `reStructuredText (ReST): Быстрый способ ввода таблиц  <http://librerussia.blogspot.ru/2015/02/restructuredtext-csv-table.html>`_

Ещё один тип таблицы — таблица в виде списка: 
::

    .. list-table:: Таблица в виде списка
       :widths: 15 10 30
       :header-rows: 1
    
       * - Treat
         - Quantity
         - Description
       * - Albatross
         - 2.99
         - On a stick!
       * - Crunchy Frog
         - 1.49
         - If we took the bones out, it wouldn't be
           crunchy, now would it?
       * - Gannet Ripple
         - 1.99
         - On a stick!

.. list-table:: Таблица в виде списка
   :widths: 15 10 30
   :header-rows: 1

   * - Treat
     - Quantity
     - Description
   * - Albatross
     - 2.99
     - On a stick!
   * - Crunchy Frog
     - 1.49
     - If we took the bones out, it wouldn't be
       crunchy, now would it?
   * - Gannet Ripple
     - 1.99
     - On a stick!



Блоки примечаний и предупреждений
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Блоки примечаний и предупреждений используются для сообщения дополнительной информации. Локализация заголовков и оформление блоков зависит от используемого шаблона. В стандартном шаблоне, используемом на сайте ReadTheDocs.org все блоки имеют собственное оформление, а локализация заголовков зависит от выбранного языка. Также язык настраивается в файле конфигурации Sphinx ``conf.py``.

.. attention:: Блок **Внимание**, команда: ``.. attention::``

.. caution:: Блок **Осторожно**, команда: ``.. caution::``

.. danger:: Блок **Опасно**, команда: ``.. danger::``

.. error:: Блок **Ошибка**, команда: ``.. error::``

.. hint:: Блок **Подсказка**, команда: ``.. hint::``
 
.. important:: Блок **Важно**, команда: ``.. important::``

.. note:: Блок **Примечание**, команда: ``.. note::``

.. tip:: Блок **Совет**, команда: ``.. tip::``

.. warning:: Блок **Предупреждение**, команда: ``.. warning::``


Код блоков выглядит так:
::

    .. tip:: Блок **Совет**, команда: ``.. tip::``


.. _rst-cont-label:


Содержание
~~~~~~~~~~

На основе заголовков ReST автоматически создает оглавление, которое вставляется командой ``.. contents::``:
::

    .. contents:: Оглавление
       :depth: 2
    
    или
    
    .. contents:: Содержание
       :depth: 3

Параметр ``:depth:`` задает уровни заголовков, которые будут включены в оглавление.

Результат:

.. contents:: Оглавление
   :depth: 2
    
или
    
.. contents:: Содержание
   :depth: 3
